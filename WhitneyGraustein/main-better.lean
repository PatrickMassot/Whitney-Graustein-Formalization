import Mathlib

open Set Function Complex Real

open Topology


structure CircleImmersion (Œ≥ : ‚Ñù ‚Üí ‚ÑÇ) : Prop where
  diff : ContDiff ‚Ñù ‚ä§ Œ≥
  per : Periodic Œ≥ 1
  derive_ne : ‚àÄ t, deriv Œ≥ t ‚â† 0

/- If extra time, prove existence of lift and convert axioms to defs/lemmas -/

/-
structure CircleImmersion.lift (Œ∏ : ‚Ñù ‚Üí ‚Ñù) : Prop where
  Œ∏ : ‚Ñù ‚Üí ‚Ñù ???
  diff : ContDiff ‚Ñù ‚ä§ Œ∏
  expr : ‚àÄ t, (deriv Œ≥ t = ‚Äñderiv Œ≥ t‚Äñ * exp (I * Œ∏ t))
-/

def CircleImmersion.lift {Œ≥ : ‚Ñù ‚Üí ‚ÑÇ} (imm_Œ≥ : CircleImmersion Œ≥) : ‚Ñù ‚Üí ‚Ñù := sorry

lemma lift_exists {Œ≥ : ‚Ñù ‚Üí ‚ÑÇ} (imm_Œ≥ : CircleImmersion Œ≥) :
  ‚àÉ Œ∏ : ‚Ñù ‚Üí ‚Ñù, (Œ∏ = CircleImmersion.lift imm_Œ≥) ‚àß (ContDiff ‚Ñù ‚ä§ Œ∏) ‚àß (‚àÄ (t : ‚Ñù), (deriv Œ≥ t = ‚Äñderiv Œ≥ t‚Äñ * exp (I * Œ∏ t))) := sorry

-- Lift unique?


variable {Œ≥ : ‚Ñù ‚Üí ‚ÑÇ} (imm_Œ≥ : CircleImmersion Œ≥)

axiom CircleImmersion.contDiff_lift : ContDiff ‚Ñù ‚ä§ imm_Œ≥.lift

axiom CircleImmersion.deriv_eq (t : ‚Ñù) : deriv Œ≥ t = ‚Äñderiv Œ≥ t‚Äñ * Complex.exp (I * imm_Œ≥.lift t)

noncomputable def CircleImmersion.turningNumber := (imm_Œ≥.lift 1 - imm_Œ≥.lift 0) / (2 * œÄ)

structure HtpyCircleImmersion (Œ≥ : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚ÑÇ) : Prop where
  diff : ContDiff ‚Ñù ‚ä§ (uncurry Œ≥)
  imm : ‚àÄ s, CircleImmersion (Œ≥ s)

lemma root_lemma_maybe {K‚ÇÅ K‚ÇÇ K‚ÇÉ: ‚Ñù} (K‚ÇÅ_pos : K‚ÇÅ > 0) (H_pos : H > 0) : ‚àÉ (N‚ÇÄ : ‚Ñï), ‚àÄ N > N‚ÇÄ, (K‚ÇÅ * H) * N - (K‚ÇÇ * H + K‚ÇÉ) > 0 := by
  let K‚ÇÅH_pos := Real.mul_pos K‚ÇÅ_pos H_pos
  use Nat.floor ((K‚ÇÉ + K‚ÇÇ * H) / (K‚ÇÅ * H) + 1)
  intro N hN
  have fact'‚ÇÇ : K‚ÇÅ * H * ((K‚ÇÉ + K‚ÇÇ * H) / (K‚ÇÅ * H)) = (K‚ÇÉ + K‚ÇÇ * H) := mul_div_cancel' (K‚ÇÉ + K‚ÇÇ * H) (ne_of_gt K‚ÇÅH_pos)
  have fact‚ÇÉ : K‚ÇÅ * H * ((K‚ÇÉ + K‚ÇÇ * H) / (K‚ÇÅ * H)) + (K‚ÇÅ * H) = (K‚ÇÉ + K‚ÇÇ * H) + (K‚ÇÅ * H) := congrFun (congrArg HAdd.hAdd fact'‚ÇÇ) (K‚ÇÅ * H)
  have fact‚ÇÑ‚Çá : (K‚ÇÅ * H) * ((K‚ÇÉ + K‚ÇÇ * H) / (K‚ÇÅ * H) + 1) = (K‚ÇÉ + K‚ÇÇ * H) + (K‚ÇÅ * H) := (Eq.congr (mul_add_one (K‚ÇÅ * H) ((K‚ÇÉ + K‚ÇÇ * H) / (K‚ÇÅ * H))) rfl).mpr fact‚ÇÉ
  have facttt : (K‚ÇÉ + K‚ÇÇ * H) + (K‚ÇÅ * H) < (K‚ÇÅ * H) * ‚ÜëN := Eq.trans_lt (id fact‚ÇÑ‚Çá.symm) ((mul_lt_mul_left K‚ÇÅH_pos).mpr ((Nat.floor_lt' (Nat.not_eq_zero_of_lt hN)).1 hN))
  have factttt : K‚ÇÉ + K‚ÇÇ * H < K‚ÇÅ * H * ‚ÜëN := gt_trans (sub_lt_self (K‚ÇÅ * H * ‚ÜëN) K‚ÇÅH_pos) (lt_tsub_iff_right.mpr facttt)
  exact sub_pos.mpr ((Eq.trans_lt (id (add_comm K‚ÇÉ (K‚ÇÇ * H)).symm)) factttt)
  -- proof, indeed.

theorem whitney_graustein {Œ≥‚ÇÄ Œ≥‚ÇÅ : ‚Ñù ‚Üí ‚ÑÇ} {t : ‚Ñù} (imm_Œ≥‚ÇÄ : CircleImmersion Œ≥‚ÇÄ) (imm_Œ≥‚ÇÅ : CircleImmersion Œ≥‚ÇÅ) :
  (imm_Œ≥‚ÇÄ.turningNumber = imm_Œ≥‚ÇÅ.turningNumber) ‚Üí ‚àÉ (Œ≥ : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚ÑÇ), HtpyCircleImmersion Œ≥ ‚àß (Œ≥ 0 = Œ≥‚ÇÄ ‚àß Œ≥ 1 = Œ≥‚ÇÅ) := by
  intro hyp --we want to show that since there exists some N,H pair such that... then there exists...
  -- get that unit is closed, and two disjoint closed subintervals "ruffling" and "unruffling"
  let unit : Set ‚Ñù := Set.Icc 0 1
  let ruffling : Set ‚Ñù := Set.Icc 0 (1/4)
  let unruffling : Set ‚Ñù := Set.Icc (3/4) 1
  let main : Set ‚Ñù := Set.Icc (1/4) (3/4)
  let antimain : Set ‚Ñù := (Set.Iic 0) ‚à™ (Set.Ici 1)

  have ruffling_closed : IsClosed (Set.Icc 0 (1/4)) := isClosed_Icc
  have unruffling_closed : IsClosed (Set.Icc (3/4) 1) := isClosed_Icc
  have main_closed : IsClosed (Set.Icc (1/4) (3/4)) := isClosed_Icc

  have ruffling_unruffling_disjoint : Disjoint ruffling unruffling := sorry
  have main_antimain_disjoint : Disjoint main antimain := sorry

  --The below lemmas depend on here: https://github.com/leanprover-community/sphere-eversion/blob/master/SphereEversion/ToMathlib/Analysis/CutOff.lean
  have cutoff_exists : ‚àÉ œÅ : ‚Ñù ‚Üí ‚Ñù, ContDiff ‚Ñù ‚ä§ œÅ ‚àß EqOn œÅ 0 ruffling ‚àß EqOn œÅ 1 unruffling ‚àß ‚àÄ x, œÅ x ‚àà Icc (0 : ‚Ñù) 1 := sorry--exists_contDiff_zero_one (hs : IsClosed s) (ht : IsClosed t) (hd : Disjoint s t)
  rcases cutoff_exists with ‚ü®œÅ, hœÅ‚ü©
  have fact : ‚àÉ (H : ‚Ñù), H > 0 := Exists.intro 1 Real.zero_lt_one
  rcases fact with ‚ü®H, hH‚ü©
  have bump_exists : ‚àÉ h : ‚Ñù ‚Üí ‚Ñù, ContDiff ‚Ñù ‚ä§ h ‚àß (‚àÄ·∂† x in ùìùÀ¢ main, h x = 0) ‚àß (‚àÄ·∂† x in ùìùÀ¢ antimain, h x = H) ‚àß ‚àÄ x, h x ‚àà Icc (0 : ‚Ñù) 1 := sorry--exists_contDiff_zero_one_nhds (hs : IsClosed s) (ht : IsClosed t) (hd : Disjoint s t)
  rcases bump_exists with ‚ü®h, hh‚ü©

  rcases (lift_exists imm_Œ≥‚ÇÄ) with ‚ü®(Œ∏‚ÇÄ : ‚Ñù ‚Üí ‚Ñù), hŒ∏‚ÇÄ‚ü©
  have hŒ∏‚ÇÄ_lift_is_lift : Œ∏‚ÇÄ = CircleImmersion.lift imm_Œ≥‚ÇÄ := hŒ∏‚ÇÄ.1
  have hŒ∏‚ÇÄ_diff : ContDiff ‚Ñù ‚ä§ Œ∏‚ÇÄ := hŒ∏‚ÇÄ.2.1
  have hŒ∏‚ÇÄ_decomp : ‚àÄ (t : ‚Ñù), deriv Œ≥‚ÇÄ t = ‚Üë‚Äñderiv Œ≥‚ÇÄ t‚Äñ * cexp (I * ‚Üë(Œ∏‚ÇÄ t)) := hŒ∏‚ÇÄ.2.2

  rcases (lift_exists imm_Œ≥‚ÇÅ) with ‚ü®(Œ∏‚ÇÅ : ‚Ñù ‚Üí ‚Ñù), hŒ∏‚ÇÅ‚ü©
  have hŒ∏‚ÇÅ_lift_is_lift : Œ∏‚ÇÅ = CircleImmersion.lift imm_Œ≥‚ÇÅ := hŒ∏‚ÇÅ.1
  have hŒ∏‚ÇÅ_diff : ContDiff ‚Ñù ‚ä§ Œ∏‚ÇÅ := hŒ∏‚ÇÅ.2.1
  have hŒ∏‚ÇÅ_decomp : ‚àÄ (t : ‚Ñù), deriv Œ≥‚ÇÅ t = ‚Üë‚Äñderiv Œ≥‚ÇÅ t‚Äñ * cexp (I * ‚Üë(Œ∏‚ÇÅ t)) := hŒ∏‚ÇÅ.2.2

  -- have critical : ‚àÉ K‚ÇÅ > 0, K‚ÇÇ ‚â• 0, K‚ÇÉ ‚â• 0, ‚àÄ H, ‚àÄ N, ‚àÄ s, t, ‚Äñderiv Œ≥ s t (wrt t)‚Äñ ‚â• K‚ÇÅ * N * H - K‚ÇÇ * H - K‚ÇÉ
  -- fix Œ≥‚ÇÄ, Œ≥‚ÇÅ, and œÅ
  -- ‚àÄ H > 0, ‚àÉ N‚ÇÄ, ‚àÄ N ‚â• N‚ÇÄ, K‚ÇÅ * N * H - K‚ÇÇ * H - K‚ÇÉ > 0
  -- need that ‚àÄ s, Œ≥ s is an immersed circle (of t) (and of course, Œ≥ 0 = Œ≥‚ÇÄ and same for 1)
  -- the extreme value theorem on (1-œÅ(s)) * Œ≥‚ÇÄ(t) + œÅ(s) * Œ≥‚ÇÅ(t) provides some maximum independent of N and H that we call K‚ÇÉ

  let (œù : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚ÑÇ) := fun s t ‚Ü¶ (1 - (œÅ s)) * (Œ≥‚ÇÄ t) + (œÅ s) * Œ≥‚ÇÅ t
  let (Œ∏ : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚Ñù) := fun s t ‚Ü¶ (1 - (œÅ s)) * (Œ∏‚ÇÄ t) + (œÅ s) * (Œ∏‚ÇÅ t)

  let (R : ‚Ñù ‚Üí ‚ÑÇ) := fun Œ∏ ‚Ü¶ exp (I * (Œ∏ : ‚Ñù))
  let ruffle : ‚Ñù ‚Üí ‚ÑÇ := fun t ‚Ü¶ -Real.sin (4 * œÄ * t) + I * 2 * Real.sin (2 * œÄ * t)
  let (Œ≥ : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚ÑÇ) := fun s t ‚Ü¶ œù s t + (h s) * (R (Œ∏ s t)) * ruffle (N * t)
  use Œ≥
  constructor
  --these statements will likely need to be proved out of order, probably starting with the statement of derive_ne
  ¬∑ sorry --HtpyCircleImmersion (Œ≥ : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚ÑÇ)
    --requires diff : ContDiff ‚Ñù ‚ä§ (uncurry Œ≥)
      --should fall out of some composition stuff
    -- requires imm : ‚àÄ s, CircleImmersion (Œ≥ s)
      --requires diff : ContDiff ‚Ñù ‚ä§ (Œ≥ s)
      --requires per : Periodic (Œ≥ s) 1
        --requires ‚àÄ t, (Œ≥ s) (t + 1) = (Œ≥ s) t
          --(œù s) := fun t ‚Ü¶ t ‚Ü¶ (1 - (œÅ s)) * (Œ≥‚ÇÄ t) + (œÅ s) * Œ≥‚ÇÅ t
          --(Œ∏ s) := t ‚Ü¶ (1 - (œÅ s)) * (Œ≥‚ÇÄ t) + (œÅ s) * Œ≥‚ÇÅ t
          --(Œ≥ s) := fun t ‚Ü¶ (œù s) t + (h s) * (R ((Œ∏ s) t)) * ruffling (N * t)
          --       = fun t ‚Ü¶ (fun t ‚Ü¶ t ‚Ü¶ (1 - (œÅ s)) * (Œ≥‚ÇÄ t) + (œÅ s) * Œ≥‚ÇÅ t) t + (h s) * (R ((t ‚Ü¶ (1 - (œÅ s)) * (Œ≥‚ÇÄ t) + (œÅ s) * Œ≥‚ÇÅ t) t)) * ruffle (N * t)
          --       = ...
      --requires derive_ne : ‚àÄ t, deriv Œ≥ t ‚â† 0
        --big thing here
        --do we need a lemma (hopefully something similar in mathlib or otherwise eliminative of the issue of separating into "phases"):
          --for all a c : ‚Ñù for all Œ≥ ContDiff on [a, c], for all b with a < b < c, if deriv Œ≥ t ‚â† 0 on (a, b) and deriv Œ≥ t ‚â† 0 on (b, c) and deriv Œ≥ b ‚â† 0, then deriv Œ≥ t ‚â† 0 on (a, b)
            --or some other lemma that relates extrema on two intervals to extrema on their union (or otherwise to that effect)
          --NOTE that the deriv Œ≥ b condition can be substituted for being monotonic on some neighborhood of b,
            --which if we take for granted, could make handling the cutoff nice if we just assert it is entirely nondecreasing (or maybe im tripping)
        --do we want to prove this with explicit values for the given R and ruffle (and h and œÅ) (anything else?) first or do we want to prove the more general statements of their existence
        --for a given s, K‚ÇÅ = min of the norm of the thing with h and N in it
          --exists cuz norm has clear lower bound 0, show that this in particular is nonzero because the terms are nonnegative and are never simultaneously zero
        --for a given s, K‚ÇÇ = max(‚Äñh * deriv (Œ∏ s) * R * ruffle‚Äñ) on s, t ‚àà [0, 1]
          --exists since everything is bounded
        --for a given s, K‚ÇÉ = max(‚Äñ(1 - œÅ s) * (Œ≥‚ÇÄ t) + (œÅ s) * (Œ≥‚ÇÅ t)‚Äñ) on s, t ‚àà [0, 1]
          --exists since (œÅ s) and Œ≥‚ÇÄ and Œ≥‚ÇÅ are all bounded on the period, etc or whatever
        --using root_lemma_maybe (or whatever it renamed to), get N‚ÇÄ and define Œ≥, carry out some triangle inequality argument showing that ‚àÄ s, ‚Äñderiv (Œ≥ s) t‚Äñ > 0, and hence nonzero.
  ¬∑ constructor
    ¬∑ sorry --Œ≥ 0 = Œ≥‚ÇÄ
    ¬∑ sorry --Œ≥ 1 = Œ≥‚ÇÅ

--Maybe of note: exp (I * h.lift t) is a local homeomorphism
